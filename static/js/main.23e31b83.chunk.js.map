{"version":3,"sources":["api/todolists-api.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/ToDoList/Task/Task.tsx","utils/errorUtils.ts","state/login-reducer.ts","state/app-reducer.ts","state/todolists-reducer.ts","state/tasks-reducer.ts","features/Todolists/ToDoList/Todolist.tsx","features/Todolists/ToDoListsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","console","log","useState","title","setTitle","error","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","model","authAPI","data","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","Checkbox","Delete","handleServerAppError","dispatch","messages","length","setAppError","setAppStatus","handleNetworkError","message","slice","createSlice","initialState","isLoggedIn","name","reducers","setIsLoggedIn","state","action","payload","authReducer","reducer","actions","isInitialized","setInitializedAppStatus","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","push","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeToDoListEntityStatusAC","setTodolistsAC","todoLists","map","t","todolistsReducer","removeTaskAC","tasks","addTaskAC","todoListId","unshift","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","description","priority","Low","startDate","deadline","then","res","resultCode","catch","Todolist","useDispatch","useEffect","todoList","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","ToDoListsList","todolists","useSelector","auth","deleteTaskTC","item","addTaskTC","changeStatus","newTitle","deleteToDoListTC","changeTodolistTitleTC","addTodolist","addToDoListTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","ref","elevation","CustomizedSnackbars","app","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","App","logOut","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","CircularProgress","top","textAlign","marginLeft","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6JAyEYA,EAOAC,E,kKCtECC,EAAcC,IAAMC,MAAK,YAA8D,IAAnDC,EAAO,EAAPA,QAAQ,EAAD,EAAEC,gBAAQ,OAAQ,EACtEC,QAAQC,IAAI,sBAEZ,MAAwBC,mBAAS,IAAG,mBAA/BC,EAAK,KAAEC,EAAQ,KACpB,EAAwBF,mBAAwB,MAAK,mBAAhDG,EAAK,KAAEC,EAAQ,KAEdC,EAAiB,WACE,KAAjBJ,EAAMK,QACNV,EAAQK,GACRC,EAAS,KAETE,EAAS,oBAEjB,EAeA,OAAO,gCACH,cAACG,EAAA,EAAS,CAACC,QAAQ,WACRL,QAASA,EACTM,MAAOR,EACPS,SAjBS,SAACC,GACrBT,EAASS,EAAEC,cAAcH,MAC7B,EAgBeI,WAdW,SAACF,GACT,OAAVR,GACAC,EAAS,MAEM,KAAfO,EAAEG,UACFT,GAER,EAQeU,MAAM,QACNC,WAAYb,EACZN,SAAUA,IAErB,cAACoB,EAAA,EAAU,CAACC,MAAM,UAAUC,QAASd,EAAgBR,SAAUA,EAAS,SACpE,cAACuB,EAAA,EAAM,QAGnB,IC5CaC,EAAe3B,IAAMC,MAAK,SAAU2B,GAC7CxB,QAAQC,IAAI,uBACZ,MAA8BC,oBAAS,GAAM,mBAAxCuB,EAAQ,KAAEC,EAAW,KAC1B,EAAwBxB,mBAASsB,EAAMb,OAAM,mBAAxCR,EAAK,KAAEC,EAAQ,KAcpB,OAAOqB,EACD,cAAChB,EAAA,EAAS,CAACE,MAAOR,EAAOS,SALX,SAACC,GACjBT,EAASS,EAAEC,cAAcH,MAC7B,EAGsDgB,WAAS,EAACC,OATvC,WACrBF,GAAY,GACZF,EAAMZ,SAAST,EACnB,IAOM,sBAAM0B,cAda,WACrBH,GAAY,GACZtB,EAASoB,EAAMb,MACnB,EAW4C,SAAEa,EAAMb,OACxD,I,2BF1BMmB,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EACG,WACR,OAAON,EAASO,IAAoB,aACxC,EAHSD,EAIK,SAACjC,GACX,OAAO2B,EAASQ,KAA6E,aAAc,CAACnC,SAChH,EANSiC,EAOK,SAACG,GACX,OAAOT,EAASU,OAAM,qBAA6BD,GACvD,EATSH,EAUK,SAACG,EAAYpC,GACvB,OAAO2B,EAASW,IAAG,qBAA+DF,GAAM,CAACpC,SAC7F,EAZSiC,EAaD,SAACM,GACL,OAAOZ,EAASO,IAAG,qBAAiCK,EAAU,UAClE,EAfSN,EAgBC,SAACM,EAAoBC,GAC3B,OAAOb,EAASU,OAAM,qBAA6BE,EAAU,kBAAUC,GAC3E,EAlBSP,EAmBC,SAACM,EAAoBvC,GAC3B,OAAO2B,EAASQ,KAAI,qBAAmFI,EAAU,UAAU,CAACvC,SAChI,EArBSiC,EAsBC,SAACM,EAAoBC,EAAgBC,GAC3C,OAAOd,EAASW,IAAG,qBAAqFC,EAAU,kBAAUC,GAAUC,EAC1I,EAGSC,EACJ,SAACC,GACF,OAAOhB,EAASQ,KAAwE,aAAcQ,EAC1G,EAHSD,EAIP,WACE,OAAOf,EAASO,IAAgE,UACpF,EANSQ,EAOH,WACF,OAAOf,EAASU,OAA0C,aAC9D,GA+BH,SALW/C,OAAY,aAAZA,IAAY,2BAAZA,IAAY,yBAAZA,IAAY,iBAKvB,CALWA,MAAY,KAavB,SANWC,OAAc,aAAdA,IAAc,mBAAdA,IAAc,WAAdA,IAAc,uBAAdA,IAAc,iBAMzB,CANWA,MAAc,KGlEnB,IAAMqD,EAAOnD,IAAMC,MAAK,SAAC2B,GAC5B,IAAMwB,EAAiBC,uBAAY,kBAAMzB,EAAM0B,WAAW1B,EAAM2B,KAAKZ,GAAIf,EAAMkB,WAAW,GAAE,CAAClB,EAAM2B,KAAKZ,GAAIf,EAAMkB,aAE5GU,EAAkBH,uBAAY,SAACpC,GACjC,IAAIwC,EAAiBxC,EAAEC,cAAcwC,QACrC9B,EAAM+B,iBAAiB/B,EAAM2B,KAAKZ,GAAIc,EAAiB5D,EAAa+D,UAAY/D,EAAagE,IAAKjC,EAAMkB,WAC5G,GAAG,CAAClB,EAAM2B,KAAKZ,GAAIf,EAAMkB,aAEnBgB,EAAuBT,uBAAY,SAACU,GACtCnC,EAAMoC,gBAAgBpC,EAAM2B,KAAKZ,GAAIoB,EAAUnC,EAAMkB,WACzD,GAAG,CAAClB,EAAM2B,KAAKZ,GAAIf,EAAMkB,aAEzB,OAAO,sBAAyBmB,UAAWrC,EAAM2B,KAAKW,SAAWrE,EAAa+D,UAAY,UAAY,GAAG,UACrG,cAACO,EAAA,EAAQ,CACLT,QAAS9B,EAAM2B,KAAKW,SAAWrE,EAAa+D,UAC5CpC,MAAM,UACNR,SAAUwC,IAGd,cAAC7B,EAAY,CAACZ,MAAOa,EAAM2B,KAAKhD,MAAOS,SAAU8C,IACjD,cAACvC,EAAA,EAAU,CAACE,QAAS2B,EAAe,SAChC,cAACgB,EAAA,EAAM,QATExC,EAAM2B,KAAKZ,GAYhC,I,gBCjCa0B,EAAuB,SAAInB,EAAuBoB,GACvDpB,EAAKqB,SAASC,OACdF,EAASG,EAAY,CAAChE,MAAOyC,EAAKqB,SAAS,MAE3CD,EAASG,EAAY,CAAChE,MAAO,+BAEjC6D,EAASI,EAAa,CAACR,OAAQ,WACnC,EAEaS,EAAqB,SAAClE,EAA0B6D,GACzDA,EAASG,EAAY,CAAChE,MAAOA,EAAMmE,QAAUnE,EAAMmE,QAAU,+BAC7DN,EAASI,EAAa,CAACR,OAAQ,WACnC,E,QCPMW,EAAQC,YAAY,CACtBC,aALiB,CACjBC,YAAY,GAKZC,KAAM,OACNC,SAAU,CACNC,cAAa,SAACC,EAAOC,GACjBD,EAAMJ,WAAaK,EAAOC,QAAQvE,KACtC,KAIKwE,EAAcV,EAAMW,QACnBL,EAAiBN,EAAMY,QAAvBN,cCDRN,EAAQC,YAAY,CACtBC,aAdmC,CACnCb,OAAQ,OACRzD,MAAO,KAEPiF,eAAe,GAWfT,KAAM,MACNC,SAAU,CACNR,aAAY,SAACU,EAAOC,GAChBD,EAAMlB,OAASmB,EAAOC,QAAQpB,MAAM,EACxCO,YAAW,SAACW,EAAOC,GACfD,EAAM3E,MAAQ4E,EAAOC,QAAQ7E,KAAK,EACtCkF,wBAAuB,SAACP,EAAOC,GAC3BD,EAAMM,cAAgBL,EAAOC,QAAQI,aACzC,KAIKE,EAAaf,EAAMW,QACzB,EAA6DX,EAAMY,QAA5DhB,EAAW,EAAXA,YAAaC,EAAY,EAAZA,aAAciB,EAAuB,EAAvBA,wBCvBnCd,GAAQC,YAAY,CACtBC,aAN4C,GAO5CE,KAAM,YACNC,SAAU,CACNW,iBAAgB,SAACT,EAAOC,GACpB,IAAMS,EAAQV,EAAMW,WAAU,SAAAC,GAAE,OAAIA,EAAGrD,KAAO0C,EAAOC,QAAQ3C,EAAE,IAC5DmD,GAAS,GACRV,EAAMa,OAAOH,EAAO,EAE5B,EACAI,cAAa,SAACd,EAAOC,GACjBD,EAAMe,KAAK,2BAAId,EAAOC,QAAQc,UAAQ,IAAEC,OAAQ,MAAOC,aAAc,SACzE,EACAC,sBAAqB,SAACnB,EAAOC,GACzB,IAAMS,EAAQV,EAAMW,WAAU,SAAAC,GAAE,OAAIA,EAAGrD,KAAO0C,EAAOC,QAAQ3C,EAAE,IAC/DyC,EAAMU,GAAOvF,MAAQ8E,EAAOC,QAAQ/E,KACxC,EACAiG,uBAAsB,SAACpB,EAAOC,GAC1B,IAAMS,EAAQV,EAAMW,WAAU,SAAAC,GAAE,OAAIA,EAAGrD,KAAO0C,EAAOC,QAAQ3C,EAAE,IAC/DyC,EAAMU,GAAOO,OAAShB,EAAOC,QAAQe,MACzC,EACAI,6BAA4B,SAACrB,EAAOC,GAChC,IAAMS,EAAQV,EAAMW,WAAU,SAAAC,GAAE,OAAIA,EAAGrD,KAAO0C,EAAOC,QAAQ3C,EAAE,IAC/DyC,EAAMU,GAAOQ,aAAejB,EAAOC,QAAQpB,MAC/C,EACAwC,eAAc,SAACtB,EAAOC,GAClB,OAAOA,EAAOC,QAAQqB,UAAUC,KAAI,SAAAC,GAAC,kCAASA,GAAC,IAAER,OAAQ,MAAOC,aAAc,QAAM,GACxF,KAIKQ,GAAmBjC,GAAMW,QAC/B,GAAuIX,GAAMY,QAAtII,GAAgB,GAAhBA,iBAAkBK,GAAa,GAAbA,cAAeK,GAAqB,GAArBA,sBAAuBC,GAAsB,GAAtBA,uBAAwBC,GAA4B,GAA5BA,6BAA8BC,GAAc,GAAdA,eCTtH7B,GAAQC,YAAY,CACtBC,aArBiC,CAkBrC,EAIIE,KAAM,QACNC,SAAU,CACN6B,aAAY,SAAC3B,EAAOC,GAChB,IAAM2B,EAAQ5B,EAAMC,EAAOC,QAAQxC,YAC7BgD,EAAQkB,EAAMjB,WAAU,SAAAc,GAAC,OAAIA,EAAElE,KAAO0C,EAAOC,QAAQvC,MAAM,IAC9D+C,GAAS,GACRkB,EAAMf,OAAOH,EAAO,EAE5B,EACAmB,UAAS,SAAC7B,EAAOC,GACbD,EAAMC,EAAOC,QAAQ/B,KAAK2D,YAAYC,QAAQ9B,EAAOC,QAAQ/B,KACjE,EACA6D,aAAY,SAAChC,EAAOC,GAChB,IAAM2B,EAAQ5B,EAAMC,EAAOC,QAAQxC,YAC7BgD,EAAQkB,EAAMjB,WAAU,SAAAc,GAAC,OAAIA,EAAElE,KAAO0C,EAAOC,QAAQvC,MAAM,IAC9D+C,GAAS,IACRkB,EAAMlB,GAAM,2BAAOkB,EAAMlB,IAAWT,EAAOC,QAAQtC,OAE3D,EACAqE,WAAU,SAACjC,EAAOC,GACdD,EAAMC,EAAOC,QAAQxC,YAAcuC,EAAOC,QAAQ0B,KACtD,GAEJM,cAAe,SAACC,GACZA,EAAQC,QAAQtB,IAAe,SAACd,EAAOC,GACnCD,EAAMC,EAAOC,QAAQc,SAASzD,IAAM,EACxC,IACA4E,EAAQC,QAAQ3B,IAAkB,SAACT,EAAOC,UAC/BD,EAAMC,EAAOC,QAAQ3C,GAChC,IACA4E,EAAQC,QAAQd,IAAgB,SAACtB,EAAOC,GACpCA,EAAOC,QAAQqB,UAAUc,SAAQ,SAACzB,GAC9BZ,EAAMY,EAAGrD,IAAM,EACnB,GACJ,GACJ,IAGS+E,GAAe7C,GAAMW,QAC3B,GAA4DX,GAAMY,QAA3DsB,GAAY,GAAZA,aAAcE,GAAS,GAATA,UAAWG,GAAY,GAAZA,aAAcC,GAAU,GAAVA,WA6CxCM,GAAe,SAAChF,EAAYiF,EAAwC9E,GAAkB,OAC/F,SAACwB,EAAoBuD,GACjBvD,EAASI,EAAa,CAACR,OAAQ,aAC/B,IACMX,EADQsE,IACKb,MAAMlE,GAAYgF,MAAK,SAAAjB,GAAC,OAAIA,EAAElE,KAAOA,CAAE,IAC1D,GAAKY,EAAL,CAIA,IAAMwE,EAA6B,aAC/BxH,MAAOgD,EAAKhD,MACZyH,YAAazE,EAAKyE,YAClB9D,OAAQX,EAAKW,OACb+D,SAAUnI,EAAeoI,IACzBC,UAAW5E,EAAK4E,UAChBC,SAAU7E,EAAK6E,UACZR,GAEPpF,EAAwBM,EAAYH,EAAIoF,GACnCM,MAAK,SAAAC,GAC0B,IAAxBA,EAAIpF,KAAKqF,YAETjE,EAAS8C,GAAa,CAACrE,OAAQJ,EAAIK,MAAO+E,EAAUjF,gBACpDwB,EAASI,EAAa,CAACR,OAAQ,gBAE/BG,EAAqBiE,EAAIpF,KAAMoB,EAEvC,IACCkE,OAAM,SAAC/H,GACJkE,EAAmBlE,EAAO6D,EAC9B,GAtBJ,MAFIlE,QAAQC,IAAI,8BAyBpB,CAAC,EChIQoI,GAAWzI,IAAMC,MAAK,SAAU2B,GACzCxB,QAAQC,IAAI,mBAEZ,IAAMiE,EAAWoE,cAEjBC,qBAAU,WDkDU,IAAC7F,ECjDjBwB,GDiDiBxB,ECjDClB,EAAMgH,SAASjG,GDiDO,SAAC2B,GAC7CA,EAASI,EAAa,CAACR,OAAQ,aAC/B1B,EAAsBM,GACjBuF,MAAK,SAAAC,GACFhE,EAAS+C,GAAW,CAACvE,aAAYkE,MAAOsB,EAAIpF,KAAK2F,SACjDvE,EAASI,EAAa,CAACR,OAAQ,cACnC,IACCsE,OAAM,SAAC/H,GACJkE,EAAmBlE,EAAO6D,EAC9B,GACR,GC1DI,GAAG,IAEH,IAAMwE,EAAUzF,uBAAY,SAAC9C,GACzBqB,EAAMkH,QAAQvI,EAAOqB,EAAMgH,SAASjG,GACxC,GAAG,CAACf,EAAMkH,QAASlH,EAAMgH,SAASjG,KAK5BoG,EAAsB1F,uBAAY,SAAC9C,GACrCqB,EAAMmH,oBAAoBnH,EAAMgH,SAASjG,GAAIpC,EACjD,GAAG,CAACqB,EAAMgH,SAASjG,GAAIf,EAAMmH,sBAEvBC,EAAoB3F,uBAAY,kBAAMzB,EAAMqH,aAAa,MAAOrH,EAAMgH,SAASjG,GAAG,GAAE,CAACf,EAAMgH,SAASjG,GAAIf,EAAMqH,eAC9GC,EAAuB7F,uBAAY,kBAAMzB,EAAMqH,aAAa,SAAUrH,EAAMgH,SAASjG,GAAG,GAAE,CAACf,EAAMgH,SAASjG,GAAIf,EAAMqH,eACpHE,EAA0B9F,uBAAY,kBAAMzB,EAAMqH,aAAa,YAAarH,EAAMgH,SAASjG,GAAG,GAAE,CAACf,EAAMgH,SAASjG,GAAIf,EAAMqH,eAG5HG,EAAmBxH,EAAMoF,MAS7B,MAP8B,WAA1BpF,EAAMgH,SAASvC,SACf+C,EAAmBxH,EAAMoF,MAAMX,QAAO,SAAAQ,GAAC,OAAIA,EAAE3C,SAAWrE,EAAagE,GAAG,KAE9C,cAA1BjC,EAAMgH,SAASvC,SACf+C,EAAmBxH,EAAMoF,MAAMX,QAAO,SAAAQ,GAAC,OAAIA,EAAE3C,SAAWrE,EAAa+D,SAAS,KAG3E,gCACH,+BAAI,cAACjC,EAAY,CAACZ,MAAOa,EAAMgH,SAASrI,MAAOS,SAAU+H,IACrD,cAACxH,EAAA,EAAU,CAACE,QAvBG,WACnBG,EAAMyH,eAAezH,EAAMgH,SAASjG,GACxC,EAqB6CxC,SAA0C,YAAhCyB,EAAMgH,SAAStC,aAA2B,SACrF,cAAClC,EAAA,EAAM,SAGf,cAACrE,EAAW,CAACG,QAAS4I,EAAS3I,SAA0C,YAAhCyB,EAAMgH,SAAStC,eACxD,8BAEQ8C,EAAiBxC,KAAI,SAAAC,GAAC,OAAI,cAAC1D,EAAI,CAAYI,KAAMsD,EAAG/D,WAAYlB,EAAMgH,SAASjG,GACrDW,WAAY1B,EAAM0B,WAClBU,gBAAiBpC,EAAMoC,gBACvBL,iBAAkB/B,EAAM+B,kBAHbkD,EAAElE,GAIjC,MAGd,sBAAK2G,MAAO,CAACC,WAAY,QAAQ,UAC7B,cAACC,EAAA,EAAM,CAAC1I,QAAmC,QAA1Bc,EAAMgH,SAASvC,OAAmB,WAAa,OACxD5E,QAASuH,EACTxH,MAAO,UAAU,iBAGzB,cAACgI,EAAA,EAAM,CAAC1I,QAAmC,WAA1Bc,EAAMgH,SAASvC,OAAsB,WAAa,OAC3D5E,QAASyH,EACT1H,MAAO,UAAU,oBAEzB,cAACgI,EAAA,EAAM,CAAC1I,QAAmC,cAA1Bc,EAAMgH,SAASvC,OAAyB,WAAa,OAC9D5E,QAAS0H,EACT3H,MAAO,YAAY,4BAIvC,I,SCtEaiI,GAA0B,WAEnC,IAAMC,EAAYC,aAAyD,SAAAvE,GAAK,OAAIA,EAAMsE,SAAS,IAC7F1C,EAAQ2C,aAA8C,SAAAvE,GAAK,OAAIA,EAAM4B,KAAK,IAC1EhC,EAAa2E,aAAY,SAACvE,GAAuB,OAAGA,EAAMwE,KAAK5E,UAAU,IACzEV,EAAWoE,cAEjBC,qBAAU,WACF3D,GAGJV,GHgB4B,SAACA,GACjCA,EAASI,EAAa,CAACR,OAAQ,aAC/B1B,IACK6F,MAAK,SAAAC,GACFhE,EAASoC,GAAe,CAACC,UAAW2B,EAAIpF,QACxCoB,EAASI,EAAa,CAACR,OAAQ,cACnC,IACCsE,OAAM,SAAC/H,GACJkE,EAAmBlE,EAAO6D,EAC9B,GACR,GGzBI,GAAG,IAEH,IAAMhB,EAAaD,uBAAY,SAAUV,EAAYG,GACjDwB,EFuDoB,SAACxB,EAAoBH,GAAU,OAAK,SAAC2B,GAC7DA,EAASI,EAAa,CAACR,OAAQ,aAC/B1B,EAAwBM,EAAYH,GAC/B0F,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAIpF,KAAKqF,WAAkB,CAC3B,IAAMlD,EAAS0B,GAAa,CAAChE,OAAQJ,EAAIG,eACzCwB,EAASe,GACTf,EAASI,EAAa,CAACR,OAAQ,cACnC,MACIG,EAAqBiE,EAAIpF,KAAMoB,EAEvC,IACCkE,OAAM,SAAC/H,GACJkE,EAAmBlE,EAAO6D,EAC9B,GACR,CAAC,CEtEgBuF,CAAa/G,EAAYH,GACtC,GAAG,IAEGmG,EAAUzF,uBAAY,SAAU9C,EAAeuC,GACjDwB,EFmEiB,SAAC/D,EAAeuC,GAAkB,OAAK,SAACwB,GAC7DA,EAASI,EAAa,CAACR,OAAQ,aAC/B1B,EAAwBM,EAAYvC,GAC/B8H,MAAK,SAAAC,GAC0B,IAAxBA,EAAIpF,KAAKqF,YACTjE,EAAS2C,GAAU,CAAC1D,KAAM+E,EAAIpF,KAAKA,KAAK4G,QACxCxF,EAASI,EAAa,CAACR,OAAQ,gBAE/BG,EAAqBiE,EAAIpF,KAAMoB,EAEvC,IACCkE,OAAM,SAAC/H,GACJkE,EAAmBlE,EAAO6D,EAC9B,GACR,CAAC,CEjFgByF,CAAUxJ,EAAOuC,GAC9B,GAAG,IAEGkH,EAAe3G,uBAAY,SAAUV,EAAYuB,EAAsBpB,GACzEwB,EAASqD,GAAahF,EAAI,CAACuB,UAASpB,GACxC,GAAG,IAEGkB,EAAkBX,uBAAY,SAAUV,EAAYsH,EAAkBnH,GACxEwB,EAASqD,GAAahF,EAAI,CAACpC,MAAO0J,GAAWnH,GACjD,GAAG,IAEGmG,EAAe5F,uBAAY,SAAUtC,EAAyB+B,GAChE,IAAMuC,EAASmB,GAAuB,CAAC7D,GAAIG,EAAYuD,OAAQtF,IAC/DuD,EAASe,EACb,GAAG,IAEGgE,EAAiBhG,uBAAY,SAAUV,GACzC2B,EHEwB,SAAC3B,GAAU,OAAK,SAAC2B,GAC7CA,EAASI,EAAa,CAACR,OAAQ,aAC/BI,EAASmC,GAA6B,CAAC9D,GAAIA,EAAKuB,OAAQ,aACxD1B,EAA4BG,GAAI0F,MAAK,SAAAC,GACjChE,EAASuB,GAAiB,CAAClD,GAAIA,KAC/B2B,EAASI,EAAa,CAACR,OAAQ,cACnC,GACJ,CAAC,CGTgBgG,CAAiBvH,GAC9B,GAAG,IAEGoG,EAAsB1F,uBAAY,SAAUV,EAAYpC,GAC1D+D,EHa6B,SAAC3B,EAAYpC,GAAa,OAAK,SAAC+D,GACjEA,EAASI,EAAa,CAACR,OAAQ,aAC/B1B,EAA4BG,EAAIpC,GAC3B8H,MAAK,SAAAC,GACFhE,EAASiC,GAAsB,CAAC5D,GAAIA,EAAIpC,MAAOA,KAC/C+D,EAASI,EAAa,CAACR,OAAQ,cACnC,GACR,CAAC,CGpBgBiG,CAAsBxH,EAAIpC,GACvC,GAAG,IAEG6J,EAAc/G,uBAAY,SAAC9C,GAC7B+D,EHEqB,SAAC/D,GAAa,OAAK,SAAC+D,GAC7CA,EAASI,EAAa,CAACR,OAAQ,aAC/B1B,EAA4BjC,GAAO8H,MAAK,SAAAC,GACpChE,EAAS4B,GAAc,CAACE,SAAUkC,EAAIpF,KAAKA,KAAK4G,QAChDxF,EAASI,EAAa,CAACR,OAAQ,cACnC,GACJ,CAAC,CGRgBmG,CAAc9J,GAC3B,GAAG,CAAC+D,IAEJ,OAAKU,EAKD,qCACI,cAACsF,EAAA,EAAI,CAACC,WAAS,EAACjB,MAAO,CAACkB,QAAS,QAAQ,SACrC,cAACzK,EAAW,CAACG,QAASkK,MAE1B,cAACE,EAAA,EAAI,CAACC,WAAS,EAACE,QAAS,EAAE,SAEnBf,EAAU9C,KAAI,SAAAZ,GACV,IAAI0E,EAAmB1D,EAAMhB,EAAGrD,IAEhC,OAAO,cAAC2H,EAAA,EAAI,CAACR,MAAI,WACb,cAACa,EAAA,EAAK,CAACrB,MAAO,CAACkB,QAAS,QAAQ,SAC5B,cAAC/B,GAAQ,CACLG,SAAU5C,EACVgB,MAAO0D,EACPpH,WAAYA,EACZ2F,aAAcA,EACdH,QAASA,EACTnF,iBAAkBqG,EAClBX,eAAgBA,EAChBrF,gBAAiBA,EACjB+E,oBAAqBA,OAXV/C,EAAGrD,GAe9B,SA5BL,cAAC,KAAQ,CAACiI,GAAI,UAiC7B,E,wCC9FMC,GAAQ7K,cAA6C,SACvD4B,EACAkJ,GAEA,OAAO,cAAC,KAAQ,aAACC,UAAW,EAAGD,IAAKA,EAAKhK,QAAQ,UAAac,GAClE,IAEe,SAASoJ,KAEpB,IAAMvK,EAAQkJ,aAA6C,SAACvE,GAAK,OAAGA,EAAM6F,IAAIxK,KAAK,IAC7E6D,EAAWoE,cACXwC,EAAmB,OAAVzK,EAET0K,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJ/G,EAASG,EAAY,CAAChE,MAAO,OACjC,EAEA,OACI,cAAC6K,GAAA,EAAQ,CAACC,KAAML,EAAQM,iBAAkB,IAAMC,QAASN,EAAY,SACjE,cAAC,GAAK,CAACM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,QAAQ,SAC7DnL,KAIjB,C,+DCnBaoL,GAAQ,WAEjB,IAAMvH,EAAWoE,cAEX1D,EAAa2E,aAAY,SAACvE,GAAuB,OAAKA,EAAMwE,KAAK5E,UAAU,IAE3E8G,EAASC,aAAU,CACrBC,SAAU,SAACC,GACP,OAAKA,EAAOC,MAKPD,EAAOE,cAAZ,EACW,CACHA,SAAU,wBANP,CACHD,MAAO,oBAQnB,EACAE,cAAe,CACXF,MAAO,GACPC,SAAU,GACVE,YAAY,GAEhBC,SAAU,SAAAL,GPfK,IAAC/I,EOgBZoB,GPhBYpB,EOgBK+I,EPhBqB,SAAC3H,GAC/CA,EAASI,EAAa,CAACR,OAAQ,aAC/BjB,EAAcC,GACTmF,MAAK,SAAAC,GAC0B,IAAxBA,EAAIpF,KAAKqF,YACTjE,EAASa,EAAc,CAACpE,OAAO,KAC/BuD,EAASI,EAAa,CAACR,OAAQ,gBAE/BG,EAAqBiE,EAAIpF,KAAMoB,EAEvC,IACCkE,OAAM,SAAC/H,GACJkE,EAAmBlE,EAAO6D,EAC9B,GACR,GOGQ,IAEJ,OAAIU,EACO,cAAC,KAAQ,CAAC4F,GAAI,MAElB,cAACN,EAAA,EAAI,CAACC,WAAS,EAACgC,eAAgB,SAAS,SAC5C,cAACjC,EAAA,EAAI,CAACR,MAAI,EAACyC,eAAgB,SAAS,SAChC,sBAAMD,SAAUR,EAAOU,aAAa,SAChC,eAACC,GAAA,EAAW,WACR,eAACC,GAAA,EAAS,WACN,yDACI,mBAAGC,KAAM,wCACNC,OAAQ,SAAS,sBAGxB,wEACA,0DACA,kDAEJ,eAACC,GAAA,EAAS,WACN,cAAChM,EAAA,EAAS,aACNQ,MAAM,QACNyL,OAAO,UACHhB,EAAOiB,cAAc,WAE5BjB,EAAOkB,OAAOd,MAAQ,8BAAMJ,EAAOkB,OAAOd,QAAe,KAC1D,cAACrL,EAAA,EAAS,aACNoM,KAAK,WACL5L,MAAM,WACNyL,OAAO,UACHhB,EAAOiB,cAAc,cAE5BjB,EAAOkB,OAAOb,SAAW,8BAAML,EAAOkB,OAAOb,WAAkB,KAChE,cAACe,GAAA,EAAgB,yBACb7L,MAAO,cACP8L,QAAS,cAAChJ,EAAA,EAAQ,KACd2H,EAAOiB,cAAc,eAAa,IACtCrJ,QAASoI,EAAOG,OAAOI,cAE3B,cAAC7C,EAAA,EAAM,CAACyD,KAAM,SAAUnM,QAAS,YAAaU,MAAO,UAAU,8BAQvF,ECfe4L,OA/Cf,WACI,IAAM9I,EAAWoE,cACXxE,EAASyF,aAAkD,SAAAvE,GAAK,OAAIA,EAAM6F,IAAI/G,MAAM,IACpFwB,EAAgBiE,aAAwC,SAAAvE,GAAK,OAAIA,EAAM6F,IAAIvF,aAAa,IACxFV,EAAa2E,aAAY,SAACvE,GAAuB,OAAKA,EAAMwE,KAAK5E,UAAU,IAEjF2D,qBAAU,WACNrE,GPM8B,SAACA,GACnCrB,IAAaoF,MAAK,SAAAC,GACa,IAAxBA,EAAIpF,KAAKqF,YACRjE,EAASa,EAAc,CAACpE,OAAO,KAInCuD,EAASqB,EAAwB,CAACD,eAAe,IACrD,GACJ,GOdI,GAAE,IAEF,IAAM2H,EAAShK,uBAAY,WACvBiB,GRGsB,SAACA,GAC3BA,EAASI,EAAa,CAACR,OAAQ,aAC/BjB,IACKoF,MAAK,SAAAC,GAC0B,IAAxBA,EAAIpF,KAAKqF,YAETjE,EAASa,EAAc,CAACpE,OAAO,KAC/BuD,EAASI,EAAa,CAACR,OAAQ,gBAE/BG,EAAqBiE,EAAIpF,KAAMoB,EAEvC,IACCkE,OAAM,SAAC/H,GACJkE,EAAmBlE,EAAO6D,EAC9B,GACR,GQjBI,GAAG,IAEH,OAAKoB,EAKD,cAAC,KAAa,UACV,sBAAKzB,UAAU,MAAK,UAChB,cAAC+G,GAAmB,IACpB,eAACsC,EAAA,EAAM,CAACC,SAAS,SAAQ,UACrB,eAACC,EAAA,EAAO,WACJ,cAACjM,EAAA,EAAU,CAACkM,KAAK,QAAQjM,MAAM,UAAU,aAAW,OAAM,SACtD,cAACkM,EAAA,EAAI,MAET,cAACC,EAAA,EAAU,CAAC7M,QAAQ,KAAI,kBAGvBkE,GAAc,cAACwE,EAAA,EAAM,CAAChI,MAAM,UAAUC,QAAS4L,EAAO,wBAE/C,YAAXnJ,GAAwB,cAAC0J,GAAA,EAAc,OAE5C,cAACC,EAAA,EAAS,CAACC,OAAK,WACZ,eAAC,KAAM,WACH,cAAC,KAAK,CAACC,KAAM,SAAUC,QAAS,cAAC,GAAK,MACtC,cAAC,KAAK,CAACD,KAAM,IAAKC,QAAS,cAAC,GAAa,MACzC,cAAC,KAAK,CAACD,KAAK,OAAOC,QAAS,uDAC5B,cAAC,KAAK,CAACD,KAAK,IAAIC,QAAS,cAAC,KAAQ,CAACpD,GAAG,qBAxB/C,cAACqD,GAAA,EAAgB,CAAC3E,MAAO,CAACiE,SAAU,QAASW,IAAK,MAAOC,UAAW,SAAUC,WAAY,QA8BzG,ECzDeC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBlG,MAAK,YAAkD,IAA/CmG,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACV,GAEJ,E,kBCDMO,GAAcC,aAAgB,CAChC9H,MAAOU,GACPgC,UAAW5C,GACXmE,IAAKrF,EACLgE,KAAMrE,IAMGwJ,GAAQC,YAAe,CAChCxJ,QAASqJ,GACTI,WAAY,SAACC,GAAoB,OAC7BA,IACKC,QAASC,KAAO,IAQ7BC,OAAON,MAAQA,GCzBfO,IAASC,OACL,cAAC,IAAMC,WAAU,UACb,cAAC,IAAQ,CAACT,MAAOA,GAAM,SACnB,cAAC,GAAG,QAGZU,SAASC,eAAe,SAM5BrB,I","file":"static/js/main.23e31b83.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '025d03b5-09be-42be-a133-c9f36a02b000'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId?: number }>>>('auth/login', data);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>('auth/me')\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('auth/login')\r\n    }\r\n\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {setAppError, setAppStatus} from \"../state/app-reducer\";\r\nimport {ResponseType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError({error: data.messages[0]}));\r\n    } else {\r\n        dispatch(setAppError({error: 'unexpected error occurred'}));\r\n    }\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}\r\n\r\nexport const handleNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppError({error: error.message ? error.message : 'unexpected error occurred'}))\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}","import {setAppStatus} from \"./app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../api/todolists-api\";\r\nimport {handleNetworkError, handleServerAppError} from \"../utils/errorUtils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst InitialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    initialState: InitialState,\r\n    name: 'auth',\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const {setIsLoggedIn} = slice.actions;\r\n\r\n// Thunks creators\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn({value: true}))\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logOutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    authAPI.logOut()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                debugger\r\n                dispatch(setIsLoggedIn({value: false}))\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\n// Types\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedIn} from \"./login-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    // true when application has been initialized (auth, user has been checked and confirmed)\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nconst slice = createSlice({\r\n    initialState: initialState,\r\n    name: 'app',\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status},\r\n        setAppError(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error},\r\n        setInitializedAppStatus(state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppError, setAppStatus, setInitializedAppStatus} = slice.actions;\r\n\r\n\r\n//Thunk creators\r\nexport const initializedAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res=> {\r\n        if(res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn({value: true}))\r\n        }else {\r\n\r\n        }\r\n        dispatch(setInitializedAppStatus({isInitialized: true}))\r\n    })\r\n}","import {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatus} from \"./app-reducer\";\r\nimport {handleNetworkError} from \"../utils/errorUtils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nconst slice = createSlice({\r\n    initialState: initialState,\r\n    name: 'todolists',\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{id: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if(index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{todolist: TodolistType}>) {\r\n            state.push({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{id: string, title: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{id: string, filter: FilterValuesType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeToDoListEntityStatusAC(state, action: PayloadAction<{id: string, status: RequestStatusType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{todoLists: Array<TodolistType>}>) {\r\n            return action.payload.todoLists.map(t => ({...t, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {removeTodolistAC, addTodolistAC, changeTodolistTitleAC, changeTodolistFilterAC, changeToDoListEntityStatusAC, setTodolistsAC} = slice.actions;\r\n\r\n// Thunk\r\nexport const fetchTodolists = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    todolistsAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(setTodolistsAC({todoLists: res.data}))\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n        })\r\n        .catch((error)=>{\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const deleteToDoListTC = (id: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeToDoListEntityStatusAC({id: id,  status: 'loading'}))\r\n    todolistsAPI.deleteTodolist(id).then(res => {\r\n        dispatch(removeTodolistAC({id: id}))\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    })\r\n}\r\nexport const addToDoListTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    todolistsAPI.createTodolist(title).then(res => {\r\n        dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    })\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then(res => {\r\n            dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n        })\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {TasksStateType} from '../app/App';\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport { setAppStatus} from \"./app-reducer\";\r\nimport {handleNetworkError, handleServerAppError} from '../utils/errorUtils';\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"./todolists-reducer\";\r\n\r\nconst InitialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nconst slice = createSlice({\r\n    initialState: InitialState,\r\n    name: 'tasks',\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{taskId: string, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if(index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{task: TaskType}>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{taskId: string, model: UpdateDomainTaskModelType, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if(index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{todolistId: string, tasks: Array<TaskType>}>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todoLists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer;\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions;\r\n\r\n// Thunk\r\nexport const setTasks = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setTasksAC({todolistId, tasks: res.data.items}))\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n        })\r\n        .catch((error) => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const deleteTaskTC = (todolistId: string, id: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    todolistsAPI.deleteTask(todolistId, id)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = removeTaskAC({taskId: id, todolistId});\r\n                dispatch(action);\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC({task: res.data.data.item}));\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (id: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === id)\r\n        if (!task) {\r\n            console.log('no such a task in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: TaskPriorities.Low,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel\r\n        }\r\n        todolistsAPI.updateTask(todolistId, id, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    //domainModel or apiModel ? Dimych put domainModel...both work\r\n                    dispatch(updateTaskAC({taskId: id, model: apiModel, todolistId}))\r\n                    dispatch(setAppStatus({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// Types\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../../../state/todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setTasks} from \"../../../state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    todoList: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasks(props.todoList.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todoList.id)\r\n    }, [props.addTask, props.todoList.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todoList.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todoList.id, title)\r\n    }, [props.todoList.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todoList.id), [props.todoList.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todoList.id), [props.todoList.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todoList.id), [props.todoList.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todoList.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todoList.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todoList.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todoList.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todoList.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todoList.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todoList.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todoList.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todoList.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport {Todolist} from \"./ToDoList/Todolist\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {\r\n    addToDoListTC,\r\n    changeTodolistFilterAC, changeTodolistTitleTC, deleteToDoListTC,\r\n    fetchTodolists,\r\n    FilterValuesType,\r\n    TodolistDomainType\r\n} from \"../../state/todolists-reducer\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {addTaskTC, deleteTaskTC, updateTaskTC} from \"../../state/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport {TasksStateType} from \"../../app/App\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\n\r\nexport const ToDoListsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector((state: AppRootStateType)=>state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=> {\r\n        if(!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolists())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(deleteTaskTC(todolistId, id))\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(title, todolistId));\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {status}, todolistId));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {title: newTitle}, todolistId));\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value});\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(deleteToDoListTC(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistTitleTC(id, title));\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addToDoListTC(title));\r\n    }, [dispatch]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    todoList={tl}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppError} from \"../../state/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function CustomizedSnackbars() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>((state)=>state.app.error)\r\n    const dispatch = useDispatch()\r\n    const isOpen = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"../../state/login-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector((state: AppRootStateType) => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    });\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            checked={formik.values.rememberMe}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {TaskType} from '../api/todolists-api'\r\nimport {ToDoListsList} from \"../features/Todolists/ToDoListsList\";\r\nimport {CircularProgress, LinearProgress} from \"@material-ui/core\";\r\nimport CustomizedSnackbars from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {initializedAppTC, RequestStatusType} from \"../state/app-reducer\";\r\nimport {BrowserRouter, Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logOutTC} from \"../state/login-reducer\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state => state.app.status))\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state => state.app.isInitialized))\r\n    const isLoggedIn = useSelector((state: AppRootStateType) => state.auth.isLoggedIn)\r\n\r\n    useEffect(()=>{\r\n        dispatch(initializedAppTC())\r\n    },[])\r\n\r\n    const logOut = useCallback(() => {\r\n        dispatch(logOutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <CircularProgress style={{position: 'fixed', top: '40%', textAlign: 'center', marginLeft: '48%'}}/>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <CustomizedSnackbars/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logOut}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path={'/login'} element={<Login/>}/>\r\n                        <Route path={'/'} element={<ToDoListsList/>}/>\r\n                        <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                        <Route path=\"*\" element={<Navigate to='/404'/>}/>\r\n                    </Routes>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./login-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// create store with redux toolkit\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware()\r\n            .prepend( thunk,)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}